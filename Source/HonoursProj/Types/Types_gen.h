// ---------------------------------------------------------------------------------------
// This File (Types_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "C:\\Users\\v2tac\\Desktop\\UNI\\Semester 8\\FIT444X - Honours Thesis\\Unreal\\HonoursProj/Source/HonoursProj\\MacroUtils.h"
#include "C:\\Users\\v2tac\\Desktop\\UNI\\Semester 8\\FIT444X - Honours Thesis\\Unreal\\HonoursProj/Source/HonoursProj\\Preprocess/Include.h"
#include "CoreMinimal.h"
#include "Algo/Transform.h"
#include "Types_gen.generated.h"

 UENUM(BlueprintType) 
 enum class EType : uint8 { 
 NONE, INT, FLOAT, BOOL, CHAR 
 , ANY, FUNCTOR, ORDINAL 
 , FUNC, NUMBER, MAYBE 
 
 }; 
 
 UENUM(BlueprintType) 
 enum class ETypeBase : uint8 { 
 NONE = (uint8)EType::NONE 
 , INT = (uint8)EType::INT 
 , FLOAT = (uint8)EType::FLOAT 
 , BOOL = (uint8)EType::BOOL 
 , CHAR = (uint8)EType::CHAR 
 
 }; 
 
 UENUM(BlueprintType) 
 enum class ETypeClass : uint8 { 
 ANY = (uint8)EType::ANY 
 , FUNCTOR = (uint8)EType::FUNCTOR 
 , ORDINAL = (uint8)EType::ORDINAL 
 
 }; 
 
 UENUM(BlueprintType) 
 enum class ETypeData : uint8 { 
 FUNC = (uint8)EType::FUNC 
 , NUMBER = (uint8)EType::NUMBER 
 , MAYBE = (uint8)EType::MAYBE 
 
 }; 

inline bool operator< (const EType lhs, const EType rhs) {
	if (rhs == EType::ANY) { return lhs != EType::ANY; }
	switch (rhs) { 
 case EType::FUNCTOR: 
 switch (lhs) { 
 case EType::FUNC: return true; 
 case EType::MAYBE: return true; 
 default: return false; 
 } 
 break; 
 case EType::ORDINAL: 
 switch (lhs) { 
 case EType::NUMBER: return true; 
 default: return false; 
 } 
 break; 
 } ;
	return false;
}
inline bool operator > (const EType lhs, const EType rhs) { return rhs < lhs; } 
 inline bool operator <= (const EType lhs, const EType rhs) { return !(lhs > rhs); } 
 inline bool operator >= (const EType lhs, const EType rhs) { return !(lhs < rhs); } 
 ;
