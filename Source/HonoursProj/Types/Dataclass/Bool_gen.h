// ---------------------------------------------------------------------------------------
// This File (Bool_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "Types/VStar.h"
#include "Types/Dataclass/Int_gen.h"
#include "Types\FDecl.h"
#include "Types\Typeclass\Eq.h"
#include "Types\Typeclass\Ordinal.h"
#include "Types\Typeclass\Enum.h"
#include "Types\Typeclass\Bounded.h"
#include "Types\Typeclass\Show.h"
#include "Types\Typeclass\Read.h"

 /*Added Typeclass Eq Instance Bool*/ 
 ;

 /*Added Typeclass Ordinal Instance Bool*/ 
 ;

 /*Added Typeclass Enum Instance Bool*/ 
 ;

 /*Added Typeclass Bounded Instance Bool*/ 
 ;

 /*Added Typeclass Show Instance Bool*/ 
 ;

 /*Added Typeclass Read Instance Bool*/ 
 ;
class IBool : public virtual ITypeclass {
private:
	virtual TSharedPtr<const Typeclass> _GetTypeclass() const override {
		return NoopPtr(&Instances);
	}
public:
	
 class Ordinal : public virtual IOrdinal { 
 private: 
 virtual ORD _ord( const VStar& a, const VStar& b) const override; 
 public: 
 Ordinal() = default; 
 }; 
 inline static const Ordinal OrdinalInst = {}; ;
	
 class Enum : public virtual IEnum { 
 private: 
 virtual VStar _toEnum(const VStar& integer) const override; 
 virtual Int _fromEnum(const VStar& value) const override; 
 public: 
 Enum() = default; 
 }; 
 inline static const Enum EnumInst = {}; ;
	
 class Bounded : public virtual IBounded { 
 private: 
 virtual VStar _minBound() const override; 
 virtual VStar _maxBound() const override; 
 public: 
 Bounded() = default; 
 }; 
 inline static const Bounded BoundedInst = {}; ;
	
 class Show : public virtual IShow { 
 private: 
 virtual FString _show( const VStar& me) const override; 
 public: 
 Show() = default; 
 }; 
 inline static const Show ShowInst = {}; ;
public:
	static const inline Typeclass Instances = []{ Typeclass ${}; $.Ordinal = &IBool::OrdinalInst; $.Eq = &IBool::OrdinalInst; $.Enum = &IBool::EnumInst; $.Bounded = &IBool::BoundedInst; $.Show = &IBool::ShowInst;; return $; }()
;
};
class Bool : public virtual IBool {
private:
	bool _value;
	friend IBool;
	friend IBool::Ordinal;
	friend IBool::Enum;
	friend IBool::Bounded;
	friend IBool::Show;
public:
	virtual ~Bool() = default;
	Bool(bool value) : _value(value) {};
	Bool(const Bool& other) : _value(other._value) {};
	virtual bool get() const { return _value; }
};
inline FString IBool::Show::_show(const VStar& me) const {
	bool a = me.ResolveToUnsafe<Bool>().get();
	return a ? FString(TEXT("✓")) : FString(TEXT("X"));
}
inline ORD IBool::Ordinal::_ord( const VStar& a, const VStar& b) const {
	bool _a = a.ResolveToUnsafe<Bool>().get();
	bool _b = b.ResolveToUnsafe<Bool>().get();
	return _a == _b ? ORD::EQ : _b ? ORD::LT : ORD::GT;
}
inline VStar IBool::Enum::_toEnum(const VStar& integer) const {
	int a = integer.ResolveToUnsafe<Int>().get();
	return Bool(a != 0);
}	
inline Int IBool::Enum::_fromEnum(const VStar& value) const {
	bool a = value.ResolveToUnsafe<Bool>().get();
	return Int(a ? 1 : 0);
}
inline VStar IBool::Bounded::_minBound() const { return Bool(false); }
inline VStar IBool::Bounded::_maxBound() const { return Bool(true); }
