// ---------------------------------------------------------------------------------------
// This File (Int_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "Types/VStar.h"
#include "Types\FDecl.h"
#include "Types\Typeclass\Num.h"
#include "Types\Typeclass\Eq.h"
#include "Types\Typeclass\Enum.h"
#include "Types\Typeclass\Bounded.h"
#include "Types\Typeclass\Ordinal.h"
#include "Types\Typeclass\Show.h"
#include "Types\Typeclass\Read.h"

 /*Added Typeclass Num Instance Int*/ 
 ;

 /*Added Typeclass Eq Instance Int*/ 
 ;

 /*Added Typeclass Ordinal Instance Int*/ 
 ;

 /*Added Typeclass Enum Instance Int*/ 
 ;

 /*Added Typeclass Bounded Instance Int*/ 
 ;

 /*Added Typeclass Show Instance Int*/ 
 ;

 /*Added Typeclass Read Instance Int*/ 
 ;
class IInt : public virtual ITypeclass {
private:
	virtual TSharedPtr<const Typeclass> _GetTypeclass() const override {
		return NoopPtr(&Instances);
	}
public:
	
 class Num : public virtual INum { 
 private: 
 virtual VStar _plus ( const VStar& a , const VStar& b ) const override;
 virtual VStar _minus ( const VStar& a , const VStar& b ) const override;
 virtual VStar _times ( const VStar& a , const VStar& b ) const override;
 virtual VStar _abs ( const VStar& value ) const override; 
 virtual VStar _sign ( const VStar& value ) const override; 
 virtual VStar _fromInt ( const VStar& integer ) const override; 
 public: 
 Num() = default; 
 }; 
 inline static const Num NumInst = {}; ;
	
 class Ordinal : public virtual IOrdinal { 
 private: 
 virtual ORD _ord( const VStar& a, const VStar& b) const override; 
 public: 
 Ordinal() = default; 
 }; 
 inline static const Ordinal OrdinalInst = {}; ;
	
 class Enum : public virtual IEnum { 
 private: 
 virtual VStar _toEnum(const VStar& integer) const override; 
 virtual Int _fromEnum(const VStar& value) const override; 
 public: 
 Enum() = default; 
 }; 
 inline static const Enum EnumInst = {}; ;
	
 class Bounded : public virtual IBounded { 
 private: 
 virtual VStar _minBound() const override; 
 virtual VStar _maxBound() const override; 
 public: 
 Bounded() = default; 
 }; 
 inline static const Bounded BoundedInst = {}; ;
	
 class Show : public virtual IShow { 
 private: 
 virtual FString _show( const VStar& me) const override; 
 public: 
 Show() = default; 
 }; 
 inline static const Show ShowInst = {}; ;
public:
	static const inline Typeclass Instances = []{ Typeclass ${}; $.Num = &IInt::NumInst; $.Ordinal = &IInt::OrdinalInst; $.Eq = &IInt::OrdinalInst; $.Enum = &IInt::EnumInst; $.Bounded = &IInt::BoundedInst; $.Show = &IInt::ShowInst;; return $; }()
;
};
class Int : public virtual IInt {
private:
	int _value;
	friend IInt;
	friend IInt::Ordinal;
	friend IInt::Enum;
	friend IInt::Bounded;
	friend IInt::Show;
	friend IInt::Num;
public:
	virtual ~Int() = default;
	Int(int value) : _value(value) {};
	virtual int get() const { return _value; }
};
