// ---------------------------------------------------------------------------------------
// This File (Traversable_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "MacroUtils.h"
#include "Functional\Prelude.h"
#include "Functional\Typeclass.h"
#include "Types\Unpack.h"
#include "Types/Typeclass/Foldable_gen.h"
#include "Types/Typeclass/Functor_gen.h"
;
class ITraversable : public virtual IFoldable, public virtual IFunctor {
	public: const Arr<const VStar&, Arr<const VStar&, Arr<const VStar&, VStar > > > traverse() const { return curry([this]( const VStar& applic , const VStar& f , const VStar& foldable ) -> VStar { return this->_traverse ( applic, f, foldable ); }); }; private: virtual VStar _traverse ( const VStar& applic , const VStar& f , const VStar& foldable ) const = 0;
	public: const Arr<const VStar&, Arr<const VStar&, VStar > > sequenceA() const { return curry([this]( const VStar& applic , const VStar& foldable ) -> VStar { return this->_sequenceA ( applic, foldable ); }); }; private: virtual VStar _sequenceA ( const VStar& applic , const VStar& foldable ) const {
		return traverse()(PreludeV::id)(foldable);
	};
};
