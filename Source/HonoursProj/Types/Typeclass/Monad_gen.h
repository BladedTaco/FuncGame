// ---------------------------------------------------------------------------------------
// This File (Monad_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "MacroUtils.h"
#include "Functional\Prelude.h"
#include "Functional\Typeclass.h"
#include "Types\Unpack.h"
#include "Types/Typeclass/Applicative_gen.h"
;
class IMonad : public virtual IApplicative {
	public: const Arr<const VStar&, Arr<const VStar&, VStar > > bind() const { return curry([this]( const VStar& m_a , const VStar& a_to_mb ) -> VStar { return this->_bind ( m_a, a_to_mb ); }); }; private: virtual VStar _bind ( const VStar& m_a , const VStar& a_to_mb ) const = 0;
	public: const Arr<const VStar&, Arr<const VStar&, VStar > > then() const { return curry([this]( const VStar& m_a , const VStar& m_b ) -> VStar { return this->_then ( m_a, m_b ); }); }; private: virtual VStar _then ( const VStar& m_a , const VStar& m_b ) const {
		return bind()(m_a)(PreludeV::constant(m_b));
	}
	public: const Arr<const VStar&, VStar > mpure() const { return curry([this]( const VStar& value ) -> VStar { return this->_mpure ( value ); }); }; private: virtual VStar _mpure ( const VStar& value ) const {
		return pure()(value);
	}
};
