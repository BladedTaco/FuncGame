// ---------------------------------------------------------------------------------------
// This File (curry_gen.h) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
#pragma once
#include "C:\\Users\\v2tac\\Desktop\\UNI\\Semester 8\\FIT444X - Honours Thesis\\Unreal\\HonoursProj/Source/HonoursProj\\MacroUtils.h"
#include "C:\\Users\\v2tac\\Desktop\\UNI\\Semester 8\\FIT444X - Honours Thesis\\Unreal\\HonoursProj/Source/HonoursProj\\Preprocess/Include.h"
#include <functional>
namespace detail {
	template <typename F>
	struct function_traits : public function_traits<decltype(&F::operator())> {};
	template <typename R, typename C, typename... Args>
	struct function_traits<R(C::*)(Args...) const> {
		using function_type = std::function<R(Args...)>;
	};
}
template <typename F>
using function_type_t = typename detail::function_traits<F>::function_type;
template <typename F>
function_type_t<F> to_function(F& lambda) {
	return static_cast< function_type_t<F> >(lambda);
}
template <typename Return, typename... Params>
using Function = std::function<Return(Params...)>;
template <typename F>
class Functor;
template <typename To, typename From>
class Func {
private:
	Function<To, From> _func;
	friend class Functor<Func<To, From>>;
public:
	Func(Function<To, From> f) {
		_func = f;
	}
	To operator()(const From& a) const {
		return _func(a);
	}
};
template <typename From, typename To>
using Arr = Func<To, From>;
template <typename First, typename To>
inline Arr<First, To> _curry(Function<To, First> f) {
	return Arr<First, To>(f);
}
template <typename T_63 , typename T_62, typename To> 
 inline Arr<T_63, Arr<T_62, To > > 
 _curry(Function<To , T_63 , T_62> f) { 
 return Arr<T_63, Arr<T_62, To > > ([=]( T_63 V_63 ) { 
 return _curry<T_62, To>( 
 [=](T_62 V_62) -> To { 
 return f(V_63 , V_62); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, To > > > 
 _curry(Function<To , T_63 , T_62 , T_61> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, To > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61, To>( 
 [=](T_62 V_62 , T_61 V_61) -> To { 
 return f(V_63 , V_62 , V_61); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, To > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, To > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60) -> To { 
 return f(V_63 , V_62 , V_61 , V_60); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, To > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, To > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, To > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, To > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, To > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, To > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, To > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, To > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, To > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, To > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, To > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, To > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54 , typename T_53, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, To > > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, To > > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54 , T_53 V_53) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54 , V_53); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54 , typename T_53 , typename T_52, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, To > > > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, To > > > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54 , T_53 V_53 , T_52 V_52) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54 , V_53 , V_52); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54 , typename T_53 , typename T_52 , typename T_51, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, To > > > > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, To > > > > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54 , T_53 V_53 , T_52 V_52 , T_51 V_51) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54 , V_53 , V_52 , V_51); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54 , typename T_53 , typename T_52 , typename T_51 , typename T_50, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, Arr<T_50, To > > > > > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51 , T_50> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, Arr<T_50, To > > > > > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51 , T_50, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54 , T_53 V_53 , T_52 V_52 , T_51 V_51 , T_50 V_50) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54 , V_53 , V_52 , V_51 , V_50); 
 } 
 ); 
 }); 
 } 
 
 template <typename T_63 , typename T_62 , typename T_61 , typename T_60 , typename T_59 , typename T_58 , typename T_57 , typename T_56 , typename T_55 , typename T_54 , typename T_53 , typename T_52 , typename T_51 , typename T_50 , typename T_49, typename To> 
 inline Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, Arr<T_50, Arr<T_49, To > > > > > > > > > > > > > > > 
 _curry(Function<To , T_63 , T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51 , T_50 , T_49> f) { 
 return Arr<T_63, Arr<T_62, Arr<T_61, Arr<T_60, Arr<T_59, Arr<T_58, Arr<T_57, Arr<T_56, Arr<T_55, Arr<T_54, Arr<T_53, Arr<T_52, Arr<T_51, Arr<T_50, Arr<T_49, To > > > > > > > > > > > > > > > ([=]( T_63 V_63 ) { 
 return _curry<T_62 , T_61 , T_60 , T_59 , T_58 , T_57 , T_56 , T_55 , T_54 , T_53 , T_52 , T_51 , T_50 , T_49, To>( 
 [=](T_62 V_62 , T_61 V_61 , T_60 V_60 , T_59 V_59 , T_58 V_58 , T_57 V_57 , T_56 V_56 , T_55 V_55 , T_54 V_54 , T_53 V_53 , T_52 V_52 , T_51 V_51 , T_50 V_50 , T_49 V_49) -> To { 
 return f(V_63 , V_62 , V_61 , V_60 , V_59 , V_58 , V_57 , V_56 , V_55 , V_54 , V_53 , V_52 , V_51 , V_50 , V_49); 
 } 
 ); 
 }); 
 } 
 
 ;
template <typename F>
inline auto curry(F const& f) {
	return _curry(to_function(f));
}
