<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".gen.h" #>

<#@ include file="C:\Users\v2tac\Desktop\UNI\Semester 8\FIT444X - Honours Thesis\Unreal\HonoursProj\packages\T4.FileManager.VisualStudio.3.1.3\content\T4.FileManager.VisualStudio19.ttinclude" #>

<#
    string ProjectDir = Host.ResolveParameterValue(null, null, "dir");

    // Start Common File Header
    var fileManager = new T4FileManager(this);
    fileManager.StartHeader();
#>
// ---------------------------------------------------------------------------------------
// This File ($filename$) is automatically generated by Preprocess.tt using T4 Text Transformer
// ANY changes made to this file directly are liable to be overwritten on compile
// If this file needs to be edited, Types.tt will need to be extended in its functionality
// ---------------------------- Start AutoGenerated File ---------------------------------
<#
    fileManager.FinishHeader();
    // End Common File Header


    string inputPath = Path.Combine(ProjectDir, "Source", "Preprocess", "Types");
    string intermediate = Path.Combine(ProjectDir, "Source", "Generated", "out.gen.h");
    string outputPath = Path.Combine(ProjectDir, "Source", "HonoursProj", "Types");

    string[] files = Directory.GetFiles(inputPath, "*.h", SearchOption.AllDirectories);

    // New Include
    Regex srcFile = new Regex($"^#line 1 (?<file>.+)$");
    // Removed Import
    Regex skippedImport = new Regex($"^include (<.+>|\".+\")$");

    // For Each Input File
    foreach (string filepath in files) {
        // Start New File 
        string filename = Path.GetFileName(filepath);
        string filebase = Path.GetFileNameWithoutExtension(filepath);

        string outName = filebase + ".gen.h";
        fileManager.StartNewFile(outName, null, outputPath);

        // Start the child process.
        System.Diagnostics.Process p = new System.Diagnostics.Process();
        // Redirect the output stream of the child process.
        p.StartInfo.CreateNoWindow = true;
        p.StartInfo.UseShellExecute = false;
        //p.StartInfo.RedirectStandardOutput = true;
        p.StartInfo.FileName = "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvarsall.bat";
        p.StartInfo.Arguments = $"x86 & cl /std:c++17 /Zc:preprocessor /TP /MT /P /D\"__PREPROCESSING\" /Fi\"{intermediate}\" /I \"{ProjectDir}/Source/HonoursProj\" \"{filepath}\"";

        p.Start();
        // Do not wait for the child process to exit before
        // reading to the end of its redirected stream.
        // p.WaitForExit();
        // Read the output stream first and then wait.
        //string output = p.StandardOutput.ReadToEnd();
        p.WaitForExit();


        // Define line regex
        Regex thisFile = new Regex($"^#line.+{filename}\"$");
        bool validOutput = false;

        // For Each Line In File
        foreach (string line in File.ReadLines(intermediate)) {
            // Output lines when the last line directive was for the file
            if (thisFile.IsMatch(line)) {
                validOutput = true;
            } else if (srcFile.IsMatch(line) && validOutput) {
                validOutput = false;
                Match match = srcFile.Match(line);          
#>
#include <#=match.Groups["file"].Value#>
<# 
            } else if (validOutput) {
                if (skippedImport.IsMatch(line)) {
#>#<#
                }
                if (!string.IsNullOrWhiteSpace(line)) {
#>
<#=line#>
<#
                }
            }
        }
    }

    fileManager.Process();
#>